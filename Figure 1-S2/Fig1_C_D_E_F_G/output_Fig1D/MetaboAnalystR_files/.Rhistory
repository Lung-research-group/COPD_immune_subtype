library(factoextra) ##for PCA loadings plots with arrows
#---Initializing:  setting all names, sizes, colors, read in data etc.: #####
#Set path where to find all .R files and folders with input/output
statisticsfilepath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
model_name <- "06_hELISAS_Donor_COPD_conc_tprotNorm_OEME_LOG_0quarterofmin_replaced"
input_file <- paste0(statisticsfilepath,"input data/",model_name,".xlsx")
parameter_labels_file <- paste0(statisticsfilepath,"input data/Parameter_labels.xlsx")
output_folder <- paste0(statisticsfilepath,"output_Fig2C/")
#read in data
subdataset <- data.frame(read_excel(input_file,  sheet = "Sheet 1"))
unique_sample_ID_colname <- "Unique_Sample_ID" #column with unique identifier per row in that dataset
sample_info <- subdataset[,1:3]
sample_names <- subdataset[,unique_sample_ID_colname] #get samples names to later reattach to results, first column is assumed to contain sample_names or other unique identifier
rownames(sample_info) <- sample_names
subdataset <- subdataset[,-c(1:3)]
rownames(subdataset) <- sample_names
#read in labels
parameter_labels <- data.frame(read_excel(parameter_labels_file,  sheet = "Parameter_labels"))
ParamID_col <- "Parameter_Name"   #name of unique ID column with parameter names in the tabsheet Parameter_Label
rownames(parameter_labels) <- parameter_labels[,ParamID_col]
#---Impute missings and perform classical PCA: ######
if(sum(is.na(subdataset))!=0) { #impute if missings exist
if(ncol(subdataset)<=10) {ncomp_impute <- ncol(subdataset)-1} else {ncomp_impute <- 10}
subdataset_imputed <- imputePCA(subdataset,ncomp_impute)$completeObs
} else {
subdataset_imputed <- subdataset
}
PCA_modelobject <- prcomp(subdataset_imputed, scale=TRUE, center=TRUE) #classical PCA calculation
#---Prepare results plotting: ######
#set names, shapes, sizes, colors
plot_title <- c("Plasma")
ann_col <- "Diagnosis"   #colname for colors
colors_fill <- c('Donor'='#757b87', 'COPD'='#791812')
colors_lines <- darken(colors_fill, 0) #to create darker outer lines of shapes set <0 but <1
names(colors_lines) <- names(colors_fill)
theme_set(theme_pubr(base_size=6, border = T, legend = "none"))
theme_journal <- theme(panel.grid.major = element_line(color = "light grey", linewidth = 0.2, linetype = "solid"),
panel.grid.minor = element_line(color = "light grey", linewidth = 0.05, linetype = "solid"),
plot.title = element_text(size = rel(1)),
axis.line.x = element_line(color="black", linewidth = 0.2),
axis.line.y = element_line(color="black", linewidth = 0.2),
axis.text = element_text(color="black", size = 6),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.2)
)
w = 49; h = 52;  #size settings for plot exports
subdataset_imputed_renamed <- subdataset_imputed   #is a matrix with samples in rows and parameters in columns
biplot_param_names <- colnames(subdataset_imputed)
biplot_param_names <- data.frame(parameter_labels[biplot_param_names,"Plot_label"])
colnames(subdataset_imputed_renamed) <- eval(parse(text = biplot_param_names))
PCA_modelobject <- prcomp(subdataset_imputed_renamed, scale=TRUE, center=TRUE) #classical PCA calculation
xlabel_PC1 <- paste0("PC1 (", round(100*summary(PCA_modelobject)$importance[2,1],1), "%)");
ylabel_PC3 <- paste0("PC3 (", round(100*summary(PCA_modelobject)$importance[2,3],1), "%)");
Biplot_cPCA_PC13 <- fviz_pca_biplot(PCA_modelobject,  axes = c(1, 3), title = plot_title,
habillage= sample_info[rownames(PCA_modelobject$x), ann_col],
mean.point = FALSE, pointsize = 1, pointshape = 19,
label ="var", select.var = list(contrib = 10), #addEllipses=TRUE, ellipse.level=0.95
labelsize = 1, arrowsize = 0.1, col.var = "#252525", repel = TRUE) + #alpha.var="contrib",  #can't color by contrib since uses already color_scale for PCA scores
scale_color_manual(values=colors_lines) +
expand_limits(x = c(min(PCA_modelobject$x[,"PC1"])*1.1, max(PCA_modelobject$x[,"PC1"])*1.1),
y = c(min(PCA_modelobject$x[,"PC3"])*1.1, max(PCA_modelobject$x[,"PC3"])*1.1)) +
guides(color = guide_legend(override.aes = list(size = 1))) + #reduces dot size in legend
xlab(xlabel_PC1) + ylab(ylabel_PC3) + theme_journal +   # +coord_fixed() #makes quadratic
theme(legend.position="none", plot.title = element_text(color="black", size = 6),
plot.caption = element_text(size = 4, hjust = 0), plot.caption.position = "plot",
axis.title.x = element_text(colour = "black", size = 6),
axis.title.y = element_text(colour = "black", size = 6) ) +
labs(caption = paste0(model_name,"__cPCA_biplot.png"))
Biplot_cPCA_PC13 <- fviz_pca_biplot(PCA_modelobject,  axes = c(1, 3), title = plot_title,
habillage= sample_info[rownames(PCA_modelobject$x), ann_col],
mean.point = FALSE, pointsize = 1, pointshape = 19,
label ="var", select.var = list(contrib = 10), #addEllipses=TRUE, ellipse.level=0.95
labelsize = 1, arrowsize = 0.1, col.var = "#252525", repel = TRUE) + #alpha.var="contrib",  #can't color by contrib since uses already color_scale for PCA scores
scale_color_manual(values=colors_lines) +
expand_limits(x = c(min(PCA_modelobject$x[,"PC1"])*1.1, max(PCA_modelobject$x[,"PC1"])*1.1),
y = c(min(PCA_modelobject$x[,"PC3"])*1.1, max(PCA_modelobject$x[,"PC3"])*1.1)) +
guides(color = guide_legend(override.aes = list(size = 1))) + #reduces dot size in legend
xlab(xlabel_PC1) + ylab(ylabel_PC3) + theme_journal +   # +coord_fixed() #makes quadratic
theme(legend.position="none", plot.title = element_text(color="black", size = 6),
plot.caption = element_text(size = 4, hjust = 0), plot.caption.position = "plot",
axis.title.x = element_text(colour = "black", size = 6),
axis.title.y = element_text(colour = "black", size = 6) ) +
labs(caption = paste0(model_name,"__cPCA_biplot.png"))
ggsave(paste0(output_folder, model_name,"__cPCA_PC13_biplot.png"),plot = Biplot_cPCA_PC13 , device = png(), width=w+5,
height=h+7, units = "mm", dpi = 900); dev.off()
Biplot_cPCA_PC13
#libraries ====
library(readxl)
library(ggpubr)
library(ggplot2)
library(igraph)
library(effsize)
library(reshape2)
library(dplyr)
library(stringr)
library(ggforce)
library(ggrepel)
library(ggpp)
library(ggforce)
#rev 01 approach (2) only COPD data --------------------------
dir <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
final_data <- read.csv(file =paste0(dir, "input data/final_data_revSC_COPDvsDonor.csv"))
final_data$Consensus_subclass <- NULL # remove the subclass diagnosis
elisa_new <- as.data.frame(final_data) # convert to data frame
elisa_new <- elisa_new[which(elisa_new$Diagnosis %in% c("COPD")),] #ONLY TAKING PATIENTS WITH IMMUNE PROFILE
clinical <- c("Age","BMI","Smoking_py","CRP",
"FEV1_percent","FVC_percent","FEV1_FVC_percent",
"RV_percent","mPAP","DLCOcSB_percent","pO2_mmHg",
"pCO2_mmHg")
sig_parameters <- c("CD19","CD3","CD4","CD8",
"Neutrophils" , "Macs_CD14hi_CD1aposHLAneg",
"Mono_clas","Mono_int", "CCL5_L","CXCL10_L",
"CXCL9_L","IL8_L",
"CXCL1_S","CCL17_S","CCL4_S","IL1b_S",
"CCL2_S","IL10_S","CXCL5_S","CCL5_S",
"IL6_S","CXCL9_S","CXCL10_S",
"TNFb_S","IFN_la2_3_S" ,clinical)
up_parameter <- c("CD19","CD3","CD4","CD8","CXCL10_L","CXCL1_S","CCL17_S",
"CXCL9_L", "CCL5_L","CCL4_S","IL1b_S", "CCL2_S","IL10_S",
"CXCL5_S","CCL5_S","IL6_S")
down_parameter <- c("Neutrophils",
"Macs_CD14hi_CD1aposHLAneg",
"Mono_clas","Mono_int", "IL8_L",
"CXCL9_S","CXCL10_S","TNFb_S","IFN_la2_3_S")
elisa_new <- elisa_new[which(colnames(elisa_new) %in% sig_parameters)]
#calculates a OPLS-DA from the MeaboAnalystR package
#---Load libraries:########--------#####
library(readxl)     ##read in excel file
library(missMDA)    ##imputePCA to impute missings in dataset to enable later classical PCA
library(ggplot2)    ##for plotting
library(ggpubr)     ##for plotting
library(colorspace) ##darken/lighten
library(MetaboAnalystR)  #for OPLS-DA
#will perform GMM and kmeans clustering with set to 2 clusters, exports results
#---Load libraries:########--------#####
library(readxl)     ##read in excel file
library(missMDA)    ##imputePCA to impute missings in dataset to enable later classical PCA
library(ggplot2)    ##for plotting
library(ggpubr)     ##for plotting
library(ggrepel)    ##for plotting labels not on top of each other
library(colorspace) ##darken/lighten
library(factoextra) ##for PCA loadings plots with arrows
library(mclust)     ##for GMM and kmeans clustering
theme_set(theme_pubr(base_size=6, border = T, legend = "none"))
theme_journal <- theme(panel.grid.major = element_line(color = "light grey", linewidth = 0.2, linetype = "solid"),
panel.grid.minor = element_line(color = "light grey", linewidth = 0.05, linetype = "solid"),
plot.title = element_text(size = rel(1)),
axis.line.x = element_line(color="black", linewidth = 0.2),
axis.line.y = element_line(color="black", linewidth = 0.2),
axis.text = element_text(color="black", size = 6),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.2)
)
w = 49; h = 52;  #size settings for plot exports
#---Initializing:  setting all names, sizes, colors, read in data etc.: #####
#Set path where to find all .R files and folders with input/output
statisticsfilepath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
model_name_per <- "15_hFACS_COPD_Lung_C_per_LOG_x1c_filtDD"
model_name_cc <- "16_hFACS_COPD_Lung_C_cc_LOG_x1c_filtDD"
input_file_per <- paste0(statisticsfilepath,"input data/",model_name_per,".xlsx")
input_file_cc <- paste0(statisticsfilepath,"input data/",model_name_cc,".xlsx")
output_folder <- paste0(statisticsfilepath,"output_Fig4_COPD_subclass/")
#read in data
unique_sample_ID_colname <- "Unique_Sample_ID" #column with unique identifier per row in that dataset
subdataset_per <- data.frame(read_excel(input_file_per,  sheet = "Sheet 1"))
sample_info_per <- subdataset_per[,1:3]
rownames(subdataset_per) <- rownames(sample_info_per) <- subdataset_per[,unique_sample_ID_colname]
subdataset_per <- subdataset_per[,-c(1:3)]
subdataset_cc <- data.frame(read_excel(input_file_cc,  sheet = "Sheet 1"))
sample_info_cc <- subdataset_cc[,1:3]
rownames(subdataset_cc) <- rownames(sample_info_cc) <- subdataset_cc[,unique_sample_ID_colname]
subdataset_cc <- subdataset_cc[,-c(1:3)]
#---Impute missings and perform classical PCA: ######
if(sum(is.na(subdataset_per))!=0) { #impute if missings exist
if(ncol(subdataset_per)<=10) {ncomp_impute <- ncol(subdataset_per)-1} else {ncomp_impute <- 10}
subdataset_imputed_per <- imputePCA(subdataset_per,ncomp_impute)$completeObs
} else {
subdataset_imputed_per <- subdataset_per
}
if(sum(is.na(subdataset_cc))!=0) { #impute if missings exist
if(ncol(subdataset_cc)<=10) {ncomp_impute <- ncol(subdataset_cc)-1} else {ncomp_impute <- 10}
subdataset_imputed_cc <- imputePCA(subdataset_cc,ncomp_impute)$completeObs
} else {
subdataset_imputed_cc <- subdataset_cc
}
#to allow matching to our naming of cluster results
subclass <- as.numeric(gsub("B", "2", gsub("A", "1", sample_info_per[,"COPD_subclass"]))) #same as in _cc
names(subclass) <- sample_info_per[,unique_sample_ID_colname]
set.seed(234971) #so that kmeans has always same result
gmm_res_per <- Mclust(subdataset_imputed_per, G = 2) #G number of clusters
gmm_plot <- fviz_cluster(gmm_res_per, geom = "point", data = subdataset_imputed_per,
ellipse.type = "convex", main = "GMM Clustering into 2") +
geom_text_repel(aes(label = rownames(subdataset_imputed_per))) +
labs(caption = paste0(model_name_per,"_gmm_2clust.png")) + theme_journal
ggsave(paste0(output_folder, model_name_per,"_gmm_2clust.png"),
plot = gmm_plot, dpi = 600, width = w*3, height = h*3, units = "mm"); #dev.off()
Diff_gmm_per <- gmm_res_per$classification == subclass
gmm_res_cc <- Mclust(subdataset_imputed_cc, G = 2) #G number of clusters
gmm_plot <- fviz_cluster(gmm_res_cc, geom = "point", data = subdataset_imputed_cc,
ellipse.type = "convex", main = "GMM Clustering into 2") +
geom_text_repel(aes(label = rownames(subdataset_imputed_per))) +
labs(caption = paste0(model_name_cc,"_gmm_2clust.png")) + theme_journal
gmm_plot
gmm_plot <- fviz_cluster(gmm_res_cc, geom = "point", data = subdataset_imputed_cc,
ellipse.type = "convex", main = "GMM Clustering into 2") +
geom_text_repel(aes(label = rownames(subdataset_imputed_per))) +
labs(caption = paste0(model_name_cc,"_gmm_2clust.png")) + theme_journal
#calculates a classical PCA (prcomp) with missings imputated by EM
#---Load libraries:########--------#####
library(readxl)     ##read in excel file
library(missMDA)    ##imputePCA to impute missings in dataset to enable later classical PCA
library(ggplot2)    ##for plotting
library(ggpubr)     ##for plotting
library(colorspace) ##darken/lighten
library(factoextra) ##for PCA loadings plots with arrows
#---Initializing:  setting all names, sizes, colors, read in data etc.: #####
#Set path where to find all .R files and folders with input/output
statisticsfilepath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
model_name <- "15_hFACS_COPD_Lung_C_per_LOG_x1c_filtDD"
input_file <- paste0(statisticsfilepath,"input data/",model_name,".xlsx")
parameter_labels_file <- paste0(statisticsfilepath,"input data/Parameter_labels.xlsx")
output_folder <- paste0(statisticsfilepath,"output_Fig4Btop/")
#read in data
subdataset <- data.frame(read_excel(input_file,  sheet = "Sheet 1"))
unique_sample_ID_colname <- "Unique_Sample_ID" #column with unique identifier per row in that dataset
sample_info <- subdataset[,1:3]
sample_names <- subdataset[,unique_sample_ID_colname] #get samples names to later reattach to results, first column is assumed to contain sample_names or other unique identifier
rownames(sample_info) <- sample_names
subdataset <- subdataset[,-c(1:3)]
rownames(subdataset) <- sample_names
#read in labels
parameter_labels <- data.frame(read_excel(parameter_labels_file,  sheet = "Parameter_labels"))
ParamID_col <- "Parameter_Name"   #name of unique ID column with parameter names in the tabsheet Parameter_Label
rownames(parameter_labels) <- parameter_labels[,ParamID_col]
#---Impute missings and perform classical PCA: ######
if(sum(is.na(subdataset))!=0) { #impute if missings exist
if(ncol(subdataset)<=10) {ncomp_impute <- ncol(subdataset)-1} else {ncomp_impute <- 10}
subdataset_imputed <- imputePCA(subdataset,ncomp_impute)$completeObs
} else {
subdataset_imputed <- subdataset
}
PCA_modelobject <- prcomp(subdataset_imputed, scale=TRUE, center=TRUE) #classical PCA calculation
#---Prepare results plotting: ######
#set names, shapes, sizes, colors
plot_title <- expression("Percentage CD45"^"+"*" cells")
ann_col <- "COPD_subclass"   #colname for colors
colors_fill <- c('A'='#661510', 'B'='#e34e45')
colors_lines <- darken(colors_fill, 0) #to create darker outer lines of shapes set <0 but <1
names(colors_lines) <- names(colors_fill)
theme_set(theme_pubr(base_size=6, border = T, legend = "none"))
theme_journal <- theme(panel.grid.major = element_line(color = "light grey", linewidth = 0.2, linetype = "solid"),
panel.grid.minor = element_line(color = "light grey", linewidth = 0.05, linetype = "solid"),
plot.title = element_text(size = rel(1)),
axis.line.x = element_line(color="black", linewidth = 0.2),
axis.line.y = element_line(color="black", linewidth = 0.2),
axis.text = element_text(color="black", size = 6),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.2)
)
w = 49; h = 52;  #size settings for plot exports
subdataset_imputed_renamed <- subdataset_imputed   #is a matrix with samples in rows and parameters in columns
biplot_param_names <- colnames(subdataset_imputed)
biplot_param_names <- data.frame(parameter_labels[biplot_param_names,"Plot_label"])
colnames(subdataset_imputed_renamed) <- eval(parse(text = biplot_param_names))
PCA_modelobject <- prcomp(subdataset_imputed_renamed, scale=TRUE, center=TRUE) #classical PCA calculation
xlabel_PC1 <- paste0("PC1 (", round(100*summary(PCA_modelobject)$importance[2,1],1), "%)");
ylabel_PC2 <- paste0("PC2 (", round(100*summary(PCA_modelobject)$importance[2,2],1), "%)");
Biplot_cPCA_PC12 <- fviz_pca_biplot(PCA_modelobject, title = parse(text = plot_title),
habillage= sample_info[rownames(PCA_modelobject$x), ann_col],
mean.point = FALSE, pointsize = 1, pointshape = 19,
label ="var", select.var = list(contrib = 10), #addEllipses=TRUE, ellipse.level=0.95
labelsize = 1, arrowsize = 0.1, col.var = "#252525", repel = TRUE) + #alpha.var="contrib",  #can't color by contrib since uses already color_scale for PCA scores
scale_color_manual(values=colors_lines) +
expand_limits(x = c(min(PCA_modelobject$x[,"PC1"])*1.1, max(PCA_modelobject$x[,"PC1"])*1.1),
y = c(min(PCA_modelobject$x[,"PC2"])*1.1, max(PCA_modelobject$x[,"PC2"])*1.1)) +
guides(color = guide_legend(override.aes = list(size = 1))) + #reduces dot size in legend
xlab(xlabel_PC1) + ylab(ylabel_PC2) + theme_journal +   # +coord_fixed() #makes quadratic
theme(legend.position="none", plot.title = element_text(color="black", size = 6),
plot.caption = element_text(size = 4, hjust = 0), plot.caption.position = "plot",
axis.title.x = element_text(colour = "black", size = 6),
axis.title.y = element_text(colour = "black", size = 6) ) +
labs(caption = paste0(model_name,"__cPCA_biplot.png"))
Biplot_cPCA_PC12
#calculates a classical PCA (prcomp) with missings imputated by EM
#---Load libraries:########--------#####
library(readxl)     ##read in excel file
library(missMDA)    ##imputePCA to impute missings in dataset to enable later classical PCA
library(ggplot2)    ##for plotting
library(ggpubr)     ##for plotting
library(colorspace) ##darken/lighten
library(factoextra) ##for PCA loadings plots with arrows
#---Initializing:  setting all names, sizes, colors, read in data etc.: #####
#Set path where to find all .R files and folders with input/output
statisticsfilepath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
model_name <- "22_hFACSELISAS_Lung_C_per_LOG_x1c_conc_filtDD_0quarterofmin_replaced"
input_file <- paste0(statisticsfilepath,"input data/",model_name,".xlsx")
parameter_labels_file <- paste0(statisticsfilepath,"input data/Parameter_labels.xlsx")
output_folder <- paste0(statisticsfilepath,"output_Fig4Ctop/")
#read in data
subdataset <- data.frame(read_excel(input_file,  sheet = "Sheet 1"))
unique_sample_ID_colname <- "Unique_Sample_ID" #column with unique identifier per row in that dataset
sample_info <- subdataset[,1:3]
sample_names <- subdataset[,unique_sample_ID_colname] #get samples names to later reattach to results, first column is assumed to contain sample_names or other unique identifier
rownames(sample_info) <- sample_names
subdataset <- subdataset[,-c(1:3)]
rownames(subdataset) <- sample_names
#read in labels
parameter_labels <- data.frame(read_excel(parameter_labels_file,  sheet = "Parameter_labels"))
ParamID_col <- "Parameter_Name"   #name of unique ID column with parameter names in the tabsheet Parameter_Label
rownames(parameter_labels) <- parameter_labels[,ParamID_col]
#---Impute missings and perform classical PCA: ######
if(sum(is.na(subdataset))!=0) { #impute if missings exist
if(ncol(subdataset)<=10) {ncomp_impute <- ncol(subdataset)-1} else {ncomp_impute <- 10}
subdataset_imputed <- imputePCA(subdataset,ncomp_impute)$completeObs
} else {
subdataset_imputed <- subdataset
}
PCA_modelobject <- prcomp(subdataset_imputed, scale=TRUE, center=TRUE) #classical PCA calculation
#---Prepare results plotting: ######
#set names, shapes, sizes, colors
plot_title <- expression("Percentage CD45"^"+"*" cells, Plasma")
ann_col <- "COPD_subclass"   #colname for colors
colors_fill <- c('A'='#661510', 'B'='#e34e45')
colors_lines <- darken(colors_fill, 0) #to create darker outer lines of shapes set <0 but <1
names(colors_lines) <- names(colors_fill)
theme_set(theme_pubr(base_size=6, border = T, legend = "none"))
theme_journal <- theme(panel.grid.major = element_line(color = "light grey", linewidth = 0.2, linetype = "solid"),
panel.grid.minor = element_line(color = "light grey", linewidth = 0.05, linetype = "solid"),
plot.title = element_text(size = rel(1)),
axis.line.x = element_line(color="black", linewidth = 0.2),
axis.line.y = element_line(color="black", linewidth = 0.2),
axis.text = element_text(color="black", size = 6),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.2)
)
w = 49; h = 52;  #size settings for plot exports
subdataset_imputed_renamed <- subdataset_imputed   #is a matrix with samples in rows and parameters in columns
biplot_param_names <- colnames(subdataset_imputed)
biplot_param_names <- data.frame(parameter_labels[biplot_param_names,"Plot_label"])
colnames(subdataset_imputed_renamed) <- eval(parse(text = biplot_param_names))
PCA_modelobject <- prcomp(subdataset_imputed_renamed, scale=TRUE, center=TRUE) #classical PCA calculation
xlabel_PC1 <- paste0("PC1 (", round(100*summary(PCA_modelobject)$importance[2,1],1), "%)");
ylabel_PC2 <- paste0("PC2 (", round(100*summary(PCA_modelobject)$importance[2,2],1), "%)");
Biplot_cPCA_PC12 <- fviz_pca_biplot(PCA_modelobject, title = parse(text = plot_title),
habillage= sample_info[rownames(PCA_modelobject$x), ann_col],
mean.point = FALSE, pointsize = 1, pointshape = 19,
label ="var", select.var = list(contrib = 10), #addEllipses=TRUE, ellipse.level=0.95
labelsize = 1, arrowsize = 0.1, col.var = "#252525", repel = TRUE) + #alpha.var="contrib",  #can't color by contrib since uses already color_scale for PCA scores
scale_color_manual(values=colors_lines) +
expand_limits(x = c(min(PCA_modelobject$x[,"PC1"])*1.1, max(PCA_modelobject$x[,"PC1"])*1.1),
y = c(min(PCA_modelobject$x[,"PC2"])*1.1, max(PCA_modelobject$x[,"PC2"])*1.1)) +
guides(color = guide_legend(override.aes = list(size = 1))) + #reduces dot size in legend
xlab(xlabel_PC1) + ylab(ylabel_PC2) + theme_journal +   # +coord_fixed() #makes quadratic
theme(legend.position="none", plot.title = element_text(color="black", size = 6),
plot.caption = element_text(size = 4, hjust = 0), plot.caption.position = "plot",
axis.title.x = element_text(colour = "black", size = 6),
axis.title.y = element_text(colour = "black", size = 6) ) +
labs(caption = paste0(model_name,"__cPCA_biplot.png"))
Biplot_cPCA_PC12
#Creates a Heatmap of the data (z-scaled)
#---Load libraries:########--------#####
library(readxl)       #read in excel file
library(ggplot2)      #for plotting
library(pheatmap)     #heatmap itsels
library(RColorBrewer) #make color scale gradients
library(dendsort)     #sort the dendograms, increases visibility of clustering results
library(dplyr) #left_join()
sort_hclust <- function(...) as.hclust(dendsort(as.dendrogram(...)))  #sorting helper function
#---Initializing:  setting all names, sizes, colors, read in data etc.: #####
#Set path where to find all .R files and folders with input/output
statisticsfilepath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
model_name <- "22_hFACSELISAS_Lung_C_per_LOG_x1c_conc_filtDD_0quarterofmin_replaced"
input_file <- paste0(statisticsfilepath,"input data/",model_name,".xlsx")
parameter_labels_file <- paste0(statisticsfilepath,"input data/Parameter_labels.xlsx")
output_folder <- paste0(statisticsfilepath,"output_Fig4D/")
#read in data
subdataset <- data.frame(read_excel(input_file,  sheet = "Sheet 1"))
unique_sample_ID_colname <- "Unique_Sample_ID" #column with unique identifier per row in that dataset
ann_col <- "COPD_subclass"   #colname for colors
sample_info <- subdataset[,1:3]
sample_names <- subdataset[,unique_sample_ID_colname] #get samples names to later reattach to results, first column is assumed to contain sample_names or other unique identifier
rownames(sample_info) <- sample_names
subdataset <- subdataset[,-c(1:3)]
rownames(subdataset) <- sample_names
#read in labels
parameter_labels <- data.frame(read_excel(parameter_labels_file,  sheet = "Parameter_labels"))
ParamID_col <- "Parameter_Name"   #name of unique ID column with parameter names in the tabsheet Parameter_Label
rownames(parameter_labels) <- parameter_labels[,ParamID_col]
#---Prepare for heatmaps: transform, calculate dendograms: ######
#1. scale  : column z-score scaling+centering i.e. parameters
subdataset_map_scaled <- scale(subdataset,scale = TRUE, center = TRUE)
#2. Dendograms: cluster
#cluster parameters, which will end up as rows in the heatmap
mat_cluster_rows <- hclust(dist(t(subdataset_map_scaled)))     #cluster parameters, which will end up as rows in the heatmap
mat_cluster_rows <- sort_hclust(mat_cluster_rows)  #to create HM's with sorted dendograms lowest to highest and nearest to each other
#cluster samples, which will end up as columns in the heatmap
mat_cluster_cols <- hclust(dist(subdataset_map_scaled))
mat_cluster_cols <- sort_hclust(mat_cluster_cols) #for HM's with sorted dendograms
#3. Calculating color break points so that color scale is centered around 0 (often needed because data often asymmetrical)
min_boundary <- min(subdataset_map_scaled,na.rm=TRUE)
max_boundary <- max(subdataset_map_scaled,na.rm=TRUE)
color_breaks <- c(seq(min_boundary, min_boundary/49, -min_boundary/49), 0, seq(max_boundary/49, max_boundary, max_boundary/49)) #asymmetric scale maxing out contrast for up and down
sample_annotation <- setNames(data.frame(as.numeric(rownames(subdataset_map_scaled))), unique_sample_ID_colname)
sample_annotation <- left_join(x = sample_annotation, y = sample_info[,c(unique_sample_ID_colname, ann_col)],
by = unique_sample_ID_colname)
rownames(sample_annotation) <- sample_annotation[,1]
sample_annotation <- sample_annotation[,-1, drop = FALSE]
annotation_colors <- list(ann_col = c('A'='#661510', 'B'='#e34e45') )
names(annotation_colors) <- ann_col
#create names and colors for parameter annotation and nice expression labels
parameter_labels_filt <- parameter_labels %>% filter(eval(parse(text = ParamID_col)) %in% colnames(subdataset_map_scaled))
#grab parameter expressions, these generate nice parameter labels with super/subscrip and greek letters
map_parameter_labels <- parameter_labels_filt[colnames(subdataset_map_scaled),"expression"]
color_palette <- c(rev(colorRampPalette(brewer.pal(9, "Blues"))(48)), "#ffffff", "#ffffff" ,
colorRampPalette(brewer.pal(9, "Reds"))(48))
na_col_color = "light grey"
border_color_set <- "dark grey"   #color of border color for every  single heatmap field, set to FALSE if none wished
cell_w_spec = 8; cell_h_spec = 8; angle_col_degree= "90"
fontsize = 8; fontsize_col = 4; fontsize_row = 6
n_cutree_rows = 5; n_cutree_cols =  1
map_w <- (nrow(subdataset_map_scaled)*cell_w_spec+350)/2.835      #is size in mm of final map
map_h <- (nrow(t(subdataset_map_scaled))*cell_h_spec+150)/2.835
heatmap <- pheatmap(mat = t(subdataset_map_scaled), scale = "none",
cluster_row = mat_cluster_rows, cluster_cols = mat_cluster_cols,		#for clustering of samples give cluster object,  switch off to keep samples as sorted without clustering
treeheight_row = 10, treeheight_col = 15, cutree_rows = n_cutree_rows, cutree_cols =  n_cutree_cols,
cellheight = cell_h_spec, cellwidth = cell_w_spec,
annotation_col = sample_annotation,  annotation_colors = annotation_colors, annotation_row = NA,
color = color_palette, breaks = color_breaks,
fontsize = fontsize, fontsize_row = fontsize_row, fontsize_col = fontsize_col,
show_colnames = TRUE, angle_col = angle_col_degree,
labels_row =  parse(text=map_parameter_labels),
border_color = border_color_set, na_col = na_col_color, drop_levels = TRUE)
# Setup ----------------
dir.create("Plots")
## Load the required libraries --------------
library(ggbiplot) #for ploting prcomp results with pretty circles etc
library(factoextra) #causes dplyr plyr problems !!! reload dplyr!
library(tidyverse)
library(ggpubr)
library(openxlsx)
library(ggpubr)
library(cowplot)
require(ggrepel)
library(patchwork)
library(rstatix) #cohens n
library(readxl)
library(tidyr)
library(missMDA)
library(pheatmap)
## Formating ---------------
theme_set(theme_pubr(base_size=16, border = T))
cons_man.fill <- scale_fill_manual(values=c("A" = "#661510", "B" = "#e34e45")) #A darker B lighter
cons_man.col <- scale_color_manual(values=c("A" = "#661510", "B" = "#e34e45")) #A darker B lighter
axis <- theme(axis.line.x = element_line(color="black", size = 0.75),
axis.line.y = element_line(color="black", size = 0.75),
plot.title = element_text(size = rel(1), colour="black", element_text(hjust = 0.5)),
axis.title.x = element_text(margin=margin(0,10,0,0)),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.text = element_text(colour="black"),
panel.grid = element_blank(),
plot.caption = element_text(size = rel(0.6)))
theme_journal2 <- theme(panel.grid.major = element_line(color = "light grey", linewidth = 0.2, linetype = "solid"),
panel.grid.minor = element_line(color = "light grey", linewidth = 0.05, linetype = "solid"),
plot.title = element_text(size = rel(1), colour="black", element_text(hjust = 0.5)),
axis.line.x = element_line(color="black", linewidth = 0.2),
axis.line.y = element_line(color="black", linewidth = 0.2),
axis.title.x = element_text(margin=margin(10,0,0,0)),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.text = element_text(color="black"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.2))
symnum.args <- list(cutpoints = c(0, 0.001, 0.01, 0.05, Inf),
symbols = c("***", "**", "*", "ns"))
p.adj <- function(x) {p.adjust(x, method = "BH")}
signif  <- function(x) {ifelse(x > -log10(0.05), "yes", "no")}
# Import data -------------------
Parameter_labels <- read_excel("iScience_input_data/Parameter_labels.xlsx", 1)
parameter_labeller <- Parameter_labels$expression
names(parameter_labeller) <- Parameter_labels$Parameter_Name
facs.per.trans <- read.xlsx("iScience_input_data/hFACS_Donor_COPD_per_LOG_x1c_full.xlsx") %>% mutate(Unique_Sample_ID = as.factor(Unique_Sample_ID))
elisa.serum.25.c1 <- read.xlsx("iScience_input_data/hELISAS_Donor_COPD_conc_LOG_0quarterofmin_cohort1.xlsx") %>% mutate(Unique_Sample_ID = as.factor(Unique_Sample_ID))
COPD_subclass <- read.xlsx("iScience_input_data/COPD_subclass.xlsx") %>%
mutate(Unique_Sample_ID = as.factor(Unique_Sample_ID)) %>%
mutate(COPD_subclass = as.factor(COPD_subclass))
# Fig 4E ---------------
## Cohen plot FACS+plasma
data <- COPD_subclass %>%
left_join(facs.per.trans) %>%
select(!c("Lymphocytes",
"Macrophages",
"Mono_clas", "Mono_int", "Mono_non",
"PMNL",
"Mast",
"Macs_CD14med", "Macs_CD14hi", # in first attempt Macs_CD14med was twice and no Macs_CD14hi
"DC_CD209neg_CD11cpos", "DC_CD209pos_CD11cneg", "DC_CD209pos_CD11cpos",
"GRAN_CD193pos_CD16neg", "GRAN_CD193pos_CD16pos")) %>%
filter(Diagnosis != "Donor") %>%
left_join((elisa.serum.25.c1 %>% mutate(across(where(is.numeric), log10)))) %>%
column_to_rownames(var = "Unique_Sample_ID")
# Fig 4E ---------------
## Cohen plot FACS+plasma
data <- COPD_subclass %>%
left_join(facs.per.trans) %>%
select(!c("Lymphocytes",
"Macrophages",
"Mono_clas", "Mono_int", "Mono_non",
"PMNL",
"Mast",
"Macs_CD14med", "Macs_CD14hi", # in first attempt Macs_CD14med was twice and no Macs_CD14hi
"DC_CD209neg_CD11cpos", "DC_CD209pos_CD11cneg", "DC_CD209pos_CD11cpos",
"GRAN_CD193pos_CD16neg", "GRAN_CD193pos_CD16pos")) %>%
filter(Diagnosis != "Donor") %>%
left_join((elisa.serum.25.c1 %>% mutate(across(where(is.numeric), log10)))) %>%
column_to_rownames(var = "Unique_Sample_ID")
# Import data -------------------
Parameter_labels <- read_excel("iScience_input_data/Parameter_labels.xlsx", 1)
parameter_labeller <- Parameter_labels$expression
